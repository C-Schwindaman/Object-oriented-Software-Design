/**
 * @file CityReport.h
 *
 * @author Anik Momtaz
 * @author Charles B. Owen
 *
 * The city report is generated by the members of the city.
 * It is a collection of objects of type MemberReport.
 */

#pragma once

#include <memory>
#include <vector>
#include <random>

class City;
class MemberReport;

/**
 * The city report is generated by the members of the city.
 * It is a collection of objects of type MemberReport.
*/
class CityReport
{
private:
    /// The city this report is for
    City* mCity;

    /// Random number generator
    std::mt19937 mRandom;

protected:
    /// Contents of a map location for a report
    class ReportHolder {
    public:
        /// The actual report
        std::shared_ptr<MemberReport> mReport;

        /// The next container or -1 for none
        int mNextContainer = -1;

        /// The next location in that container
        int mNextLocation = 0;
    };

    /// The number of containers to use
    static const int NumContainers = 5;

    /// The containers
    std::vector<std::shared_ptr<ReportHolder>> mContainers[NumContainers];

    /// The first container, initially -1 for no container
    int mFirstContainer = -1;

    /// The first location in the first container
    int mFirstLocation = 0;

    /// The container for the last record
    int mLastContainer = -1;

    /// The location in the container for the last record
    int mLastLocation = 0;

public:
    explicit CityReport(City* city);

    void Add(std::shared_ptr<MemberReport> report);

    /** Iterator that iterates over a city report */
    class Iter
    {
    public:
        /** Constructor
         * @param report The city report we are iterating over
         * @param container Container in the collection
         * @param location Location in the collection
         */
        Iter(CityReport* report, int container, int location) : mReport(report), mContainer(container), mLocation(location) {}

        /**
         * Compare two iterators
         * @param other The other iterator we are comparing to
         * @return true if this container is not equal to the other container
         *      or true if this location is not equal to the other location
        */
        bool operator!=(const Iter& other) const {
            return mContainer != other.mContainer || mLocation != other.mLocation;
        }

        /**
         * Get value at current position
         * @return Value at mContainer and mLocation in the collection
         */
        std::shared_ptr<MemberReport> operator*() const {
            return mReport->mContainers[mContainer][mLocation]->mReport;
        }

        /**
         * Increment the iterator
         * @return Reference to this iterator
         */
        Iter& operator++() {
            auto current = mReport->mContainers[mContainer][mLocation];
            mContainer = current->mNextContainer;
            mLocation = current->mNextLocation;
            return *this;
        }

    private:
        CityReport* mReport;   ///< City report we are iterating over
        int mContainer;       ///< Container in the collection
        int mLocation;       ///< Location in the collection
    };

    /**
     * Get an iterator for the beginning of the collection
     * @return Iter object at first position
     */
    Iter begin() {
        return Iter(this, mFirstContainer, mFirstLocation);
    }

    /**
     * Get an iterator for the end of the collection
     * @return Iter object at position past the end
     */
    Iter end() {
        return Iter(this, -1, 0);
    }
};

